
#!/usr/bin/env python3
"""
Script de instala√ß√£o e inicializa√ß√£o do Dashboard Embrapa Meio-Norte
"""

import os
import sys
import subprocess
import sqlite3
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def install_requirements():
    """Instala as depend√™ncias do requirements.txt"""
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def initialize_database():
    """Inicializa o banco de dados"""
    print("üóÑÔ∏è Inicializando banco de dados...")
    try:
        from database import DatabaseManager
        db = DatabaseManager()
        db.populate_sample_data()
        print("‚úÖ Banco de dados inicializado com dados de exemplo!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao inicializar banco de dados: {e}")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("üìÅ Criando diret√≥rios...")
    directories = ['uploads', 'exports', 'logs']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio '{directory}' criado/verificado")

def run_tests():
    """Executa testes b√°sicos do sistema"""
    print("üß™ Executando testes b√°sicos...")
    try:
        # Teste de importa√ß√£o dos m√≥dulos
        from auth import AuthManager
        from database import DatabaseManager
        from modules.projects import ProjectsManager
        from modules.admin import AdminManager
        from modules.kpis import KPIManager
        from modules.publications import PublicationsManager
        from modules.experimental_data import ExperimentalDataManager
        from modules.alerts import AlertsManager
        from modules.export import ExportManager
        
        print("‚úÖ Todos os m√≥dulos importados com sucesso!")
        
        # Teste de conex√£o com banco
        db = DatabaseManager()
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        conn.close()
        
        print(f"‚úÖ Banco de dados conectado - {user_count} usu√°rios encontrados")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos testes: {e}")
        return False

def show_usage_info():
    """Mostra informa√ß√µes de uso"""
    print("\n" + "="*60)
    print("üå± DASHBOARD EMBRAPA MEIO-NORTE - INSTALA√á√ÉO CONCLU√çDA!")
    print("="*60)
    print("\nüìã COMO USAR:")
    print("1. Execute o comando: streamlit run app.py")
    print("2. Acesse: http://localhost:8501")
    print("\nüë§ USU√ÅRIOS DE TESTE:")
    print("‚Ä¢ Administrador: admin / admin123")
    print("‚Ä¢ Pesquisador: joao.silva / pesq123")
    print("‚Ä¢ Gestor: maria.santos / gest123")
    print("\nüìö FUNCIONALIDADES:")
    print("‚Ä¢ Gest√£o de Projetos PD&I")
    print("‚Ä¢ Gest√£o Administrativa")
    print("‚Ä¢ Indicadores de Desempenho (KPIs)")
    print("‚Ä¢ Publica√ß√µes e Relat√≥rios")
    print("‚Ä¢ Dados Experimentais")
    print("‚Ä¢ Sistema de Alertas")
    print("‚Ä¢ Exporta√ß√£o (CSV, Excel, PDF)")
    print("\nüìñ Para mais informa√ß√µes, consulte o README.md")
    print("="*60)

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print("üå± INSTALADOR - Dashboard Embrapa Meio-Norte")
    print("="*50)
    
    # Verificar vers√£o do Python
    if not check_python_version():
        sys.exit(1)
    
    # Instalar depend√™ncias
    if not install_requirements():
        print("‚ùå Falha na instala√ß√£o. Tente executar manualmente:")
        print("pip install -r requirements.txt")
        sys.exit(1)
    
    # Criar diret√≥rios
    create_directories()
    
    # Inicializar banco de dados
    if not initialize_database():
        print("‚ùå Falha na inicializa√ß√£o do banco de dados")
        sys.exit(1)
    
    # Executar testes
    if not run_tests():
        print("‚ö†Ô∏è Alguns testes falharam, mas a instala√ß√£o pode estar funcional")
    
    # Mostrar informa√ß√µes de uso
    show_usage_info()
    
    # Perguntar se deseja executar o sistema
    response = input("\nüöÄ Deseja executar o sistema agora? (s/n): ").lower().strip()
    if response in ['s', 'sim', 'y', 'yes']:
        print("\nüöÄ Iniciando o Dashboard...")
        try:
            subprocess.run([sys.executable, "-m", "streamlit", "run", "app.py"])
        except KeyboardInterrupt:
            print("\nüëã Sistema encerrado pelo usu√°rio")
        except Exception as e:
            print(f"\n‚ùå Erro ao executar: {e}")
            print("Execute manualmente: streamlit run app.py")

if __name__ == "__main__":
    main()
